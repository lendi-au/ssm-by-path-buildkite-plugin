#!/bin/bash

set -e
set -o pipefail
set -u

main() {
  local role="${BUILDKITE_PLUGIN_SSM_BY_PATH_ASSUME_ROLE_ARN:-}"
  local build="${BUILDKITE_BUILD_NUMBER:-}"

  if [[ -n $role && -n $build ]]; then
    echo "~~~ Assuming IAM role $role ..."
    eval "$(assume_role_credentials "$role" "$build" | credentials_json_to_shell_exports)"

    echo "Exported session credentials:"
    echo "  AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID"
    echo "  AWS_SECRET_ACCESS_KEY=(${#AWS_SECRET_ACCESS_KEY} chars)"
    echo "  AWS_SESSION_TOKEN=(${#AWS_SESSION_TOKEN} chars)"
  else
    echo "Missing BUILDKITE_PLUGIN_SSM_BY_PATH_ASSUME_ROLE_ARN or BUILDKITE_BUILD_NUMBER"
  fi

  local awsregion=${AWS_DEFAULT_REGION:-us-east-1}
  local ssmpath="${BUILDKITE_PLUGIN_SSM_BY_PATH_SSMPATH:-}"
  local recursive
  recursive=$(echo "${BUILDKITE_PLUGIN_SSM_BY_PATH_RECURSIVE:-}" | tr '[:upper:]' '[:lower:]')

  if [ "${recursive}" = 'true' ]; then
    recursive='--recursive'
  else
    recursive=''
  fi

  ssm_get_parameter_by_path "${ssmpath}" "${awsregion}" "${recursive}"

}

# Assume the IAM role $1, allocate a session name derived from $2.
# output: the Credentials portion of the AWS response JSON;
#     {
#         "SecretAccessKey": "foo"
#         "SessionToken": "bar",
#         "Expiration": "...",
#         "AccessKeyId": "baz"
#     }
assume_role_credentials() {
  local role="$1"
  local build="$2"
  aws sts assume-role \
    --role-arn "$role" \
    --role-session-name "aws-assume-role-buildkite-plugin-${build}" \
    --query Credentials
}

# Convert credentials JSON to shell export statements using standard CLI tools
# input:
#     {
#         "SecretAccessKey": "foo"
#         "SessionToken": "bar",
#         "Expiration": "...",
#         "AccessKeyId": "baz"
#     }
# output:
#     export AWS_SECRET_ACCESS_KEY="foo"
#     export AWS_SESSION_TOKEN="bar"
#     export AWS_ACCESS_KEY_ID="baz"
credentials_json_to_shell_exports() {
  sed \
    -e 's/ *"\(.*\)": \(".*"\),*/\1=\2/g' \
    -e 's/^SecretAccessKey/export AWS_SECRET_ACCESS_KEY/' \
    -e 's/^AccessKeyId/export AWS_ACCESS_KEY_ID/' \
    -e 's/^SessionToken/export AWS_SESSION_TOKEN/' \
    | grep "^export AWS"
}


# Retieve the SSM Parameter $1, using the region defined in $2.
# output: the SSM Key, Value as an environment variable;
# output: export MySecret=MyValue
#   {
#       "InvalidParameters": [],
#       "Parameters": [
#           {
#               "Type": "String",
#               "Name": "/MySecret",
#               "Value": "MyValue"
#           }
#       ]
#   }
ssm_get_parameter_by_path() {
    local ssmpath="$1"
    local awsregion="$2"
    local recurse="$3"
    echo "--- :ssm: Get SSM ${ssmpath} in region ${awsregion}"
    eval "$(aws ssm get-parameters-by-path --region "${awsregion}" --path "${ssmpath}" "${recurse}" \
     --with-decryption --query 'Parameters[].{Name: Name,Value: Value}' \
     | jq -r --arg prefix "$ssmpath/" '.[] | .Name |= sub($prefix; "")
     | "export " + .Name + "=\"" + .Value + "\""')"
}

main
